import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  ScrollView,
  Alert,
  Image,
  ActivityIndicator,
  FlatList
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation, useRoute } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import * as Contacts from 'expo-contacts';
import { useAuth } from '../context/AuthContext';
import { supabase } from '../services/supabase';

type AppContact = {
  id: string;
  name: string;
  phoneNumber?: string;
  username?: string;
  isAppUser: boolean;
  isSelected: boolean;
};

type RouteParams = {
  onFriendsSelected?: (friendIds: string[]) => void;
};

interface FriendshipData {
  friend_id: string;
  users: {
    id: string;
    username: string | null;
    phone: string | null;
  };
}

const SelectFriendsScreen = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [contacts, setContacts] = useState<AppContact[]>([]);
  const [appFriends, setAppFriends] = useState<AppContact[]>([]);
  const [loading, setLoading] = useState(true);
  const [hasPermission, setHasPermission] = useState(false);
  const [showPermissionModal, setShowPermissionModal] = useState(false);
  const [selectedContacts, setSelectedContacts] = useState<string[]>([]);

  const navigation = useNavigation<StackNavigationProp<any>>();
  const route = useRoute();
  const { user } = useAuth();
  const params = route.params as RouteParams;

  useEffect(() => {
    loadAppFriends();
  }, []);

  const loadAppFriends = async () => {
    setLoading(true);
    try {
      // Get friends from Supabase
      if (user) {
        const { data, error } = await supabase
          .from('friendships')
          .select('friend_id, users!friendships_friend_id_fkey(id, username, phone)')
          .eq('user_id', user.id);

        if (error) {
          console.error('Error loading friends:', error);
          return;
        }

        if (data && data.length > 0) {
          // First cast to unknown then to our expected type
          const friendshipData = data as unknown as FriendshipData[];
          const friends: AppContact[] = friendshipData.map(item => ({
            id: item.users.id,
            name: item.users.username || 'User',
            username: item.users.username || undefined,
            phoneNumber: item.users.phone || undefined,
            isAppUser: true,
            isSelected: false
          }));
          setAppFriends(friends);
        } else {
          setAppFriends([]);
        }
      }
    } catch (error) {
      console.error('Error in loadAppFriends:', error);
    } finally {
      setLoading(false);
    }
  };

  const requestContactsPermission = async () => {
    try {
      const { status } = await Contacts.requestPermissionsAsync();
      setHasPermission(status === 'granted');
      
      if (status === 'granted') {
        loadContacts();
        setShowPermissionModal(false);
      } else {
        setShowPermissionModal(false);
      }
    } catch (error) {
      console.error('Error requesting contacts permission:', error);
    }
  };

  const loadContacts = async () => {
    try {
      const { data } = await Contacts.getContactsAsync({
        fields: [Contacts.Fields.Name, Contacts.Fields.PhoneNumbers],
      });

      if (data.length > 0) {
        const contactsList: AppContact[] = data
          .filter(contact => contact.name && contact.phoneNumbers && contact.phoneNumbers.length > 0)
          .map(contact => ({
            // Ensure id is always a string
            id: contact.id || `contact-${Math.random().toString(36).substr(2, 9)}`,
            name: contact.name || 'Unknown',
            phoneNumber: contact.phoneNumbers?.[0]?.number,
            isAppUser: false,
            isSelected: false
          }));
        setContacts(contactsList);
      }
    } catch (error) {
      console.error('Error loading contacts:', error);
    }
  };

  const toggleContactSelection = (id: string, section: 'contacts' | 'friends') => {
    if (section === 'contacts') {
      setContacts(prev => 
        prev.map(contact => 
          contact.id === id ? { ...contact, isSelected: !contact.isSelected } : contact
        )
      );
    } else {
      setAppFriends(prev => 
        prev.map(friend => 
          friend.id === id ? { ...friend, isSelected: !friend.isSelected } : friend
        )
      );
    }

    // Update selected contacts
    setSelectedContacts(prev => {
      if (prev.includes(id)) {
        return prev.filter(contactId => contactId !== id);
      } else {
        return [...prev, id];
      }
    });
  };

  const handleInvite = () => {
    setShowPermissionModal(true);
  };

  const handleDone = () => {
    if (params.onFriendsSelected) {
      params.onFriendsSelected(selectedContacts);
    }
    navigation.goBack();
  };

  const filteredAppFriends = searchQuery 
    ? appFriends.filter(friend => 
        friend.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (friend.username && friend.username.toLowerCase().includes(searchQuery.toLowerCase()))
      )
    : appFriends;

  const filteredContacts = searchQuery 
    ? contacts.filter(contact => 
        contact.name.toLowerCase().includes(searchQuery.toLowerCase())
      )
    : contacts;

  const renderPermissionModal = () => (
    <View style={styles.modalOverlay}>
      <View style={styles.modalContent}>
        <Text style={styles.modalTitle}>"Bet" Would Like to Access Your Contacts</Text>
        <Text style={styles.modalText}>This lets you select the friends you want to invite.</Text>
        
        <TouchableOpacity style={styles.modalButton} onPress={() => requestContactsPermission()}>
          <Text style={styles.modalButtonText}>Select Contacts</Text>
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.modalButton} onPress={() => requestContactsPermission()}>
          <Text style={styles.modalButtonText}>Allow Access to all Contacts</Text>
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.modalButtonOutline} onPress={() => setShowPermissionModal(false)}>
          <Text style={styles.modalButtonOutlineText}>Don't Allow</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  const ContactItem = ({ contact, section }: { contact: AppContact, section: 'contacts' | 'friends' }) => (
    <TouchableOpacity 
      style={styles.contactItem} 
      onPress={() => toggleContactSelection(contact.id, section)}
    >
      <View style={styles.contactAvatar}>
        <Text style={styles.contactInitial}>{contact.name.charAt(0).toUpperCase()}</Text>
      </View>
      <View style={styles.contactInfo}>
        <Text style={styles.contactName}>{contact.name}</Text>
        <Text style={styles.contactDetail}>
          {section === 'friends' 
            ? (contact.username || contact.phoneNumber || '')
            : (contact.phoneNumber || '')}
        </Text>
      </View>
      <TouchableOpacity onPress={() => toggleContactSelection(contact.id, section)}>
        <Ionicons 
          name={contact.isSelected ? "person-add" : "person-add-outline"} 
          size={24} 
          color="#fff"
        />
      </TouchableOpacity>
    </TouchableOpacity>
  );

  const EmptyFriendsList = () => (
    <View style={styles.emptyContainer}>
      <View style={styles.emptyIconContainer}>
        <Ionicons name="people" size={64} color="#ccc" />
      </View>
      <Text style={styles.emptyText}>You have no friends ðŸ˜¢</Text>
      <TouchableOpacity style={styles.inviteButton} onPress={handleInvite}>
        <Ionicons name="person-add" size={20} color="#fff" style={styles.inviteIcon} />
        <Text style={styles.inviteButtonText}>Invite Friends</Text>
      </TouchableOpacity>
    </View>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
          <Ionicons name="chevron-back" size={28} color="white" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>To</Text>
        <TextInput
          style={styles.searchInput}
          placeholder="Name, @handle, Phone"
          placeholderTextColor="#AAA"
          value={searchQuery}
          onChangeText={setSearchQuery}
        />
      </View>

      {loading ? (
        <ActivityIndicator size="large" color="#6B46C1" style={styles.loader} />
      ) : (
        <ScrollView style={styles.scrollView}>
          {appFriends.length === 0 && !hasPermission ? (
            <EmptyFriendsList />
          ) : (
            <>
              {hasPermission && contacts.length > 0 && (
                <View>
                  <Text style={styles.sectionHeader}>Contacts</Text>
                  {filteredContacts.map(contact => (
                    <ContactItem 
                      key={`contact-${contact.id}`} 
                      contact={contact} 
                      section="contacts" 
                    />
                  ))}
                </View>
              )}

              {appFriends.length > 0 && (
                <View>
                  <Text style={styles.sectionHeader}>Friends</Text>
                  {filteredAppFriends.map(friend => (
                    <ContactItem 
                      key={`friend-${friend.id}`} 
                      contact={friend} 
                      section="friends" 
                    />
                  ))}
                </View>
              )}

              {!hasPermission && (
                <TouchableOpacity 
                  style={styles.inviteButtonSmall} 
                  onPress={handleInvite}
                >
                  <Ionicons name="add-circle-outline" size={20} color="#fff" />
                  <Text style={styles.inviteButtonTextSmall}>Invite from Contacts</Text>
                </TouchableOpacity>
              )}
            </>
          )}
        </ScrollView>
      )}

      {selectedContacts.length > 0 && (
        <TouchableOpacity style={styles.doneButton} onPress={handleDone}>
          <Text style={styles.doneButtonText}>Done ({selectedContacts.length})</Text>
        </TouchableOpacity>
      )}

      {showPermissionModal && renderPermissionModal()}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121212',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    paddingTop: 45,
    backgroundColor: '#222',
  },
  backButton: {
    marginRight: 10,
  },
  headerTitle: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    marginRight: 10,
  },
  searchInput: {
    flex: 1,
    color: 'white',
    fontSize: 16,
    height: 40,
  },
  scrollView: {
    flex: 1,
  },
  sectionHeader: {
    color: '#999',
    fontSize: 18,
    fontWeight: 'bold',
    backgroundColor: '#222',
    padding: 10,
  },
  contactItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#2A2A2A',
  },
  contactAvatar: {
    width: 45,
    height: 45,
    borderRadius: 25,
    backgroundColor: '#6B46C1',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  contactInitial: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
  },
  contactInfo: {
    flex: 1,
  },
  contactName: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  contactDetail: {
    color: '#999',
    fontSize: 14,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingTop: 100,
  },
  emptyIconContainer: {
    width: 120,
    height: 120,
    borderRadius: 60,
    backgroundColor: '#2A2A2A',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
  },
  emptyText: {
    color: 'white',
    fontSize: 18,
    marginBottom: 30,
  },
  inviteButton: {
    flexDirection: 'row',
    backgroundColor: '#6B46C1',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
  },
  inviteIcon: {
    marginRight: 8,
  },
  inviteButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  inviteButtonSmall: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    margin: 15,
    backgroundColor: '#333',
    borderRadius: 8,
  },
  inviteButtonTextSmall: {
    color: 'white',
    fontSize: 16,
    marginLeft: 8,
  },
  doneButton: {
    backgroundColor: '#6B46C1',
    padding: 15,
    margin: 15,
    borderRadius: 8,
    alignItems: 'center',
  },
  doneButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  loader: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalOverlay: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(0,0,0,0.7)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  modalContent: {
    width: '80%',
    backgroundColor: '#FFF',
    borderRadius: 10,
    padding: 20,
    alignItems: 'center',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 10,
  },
  modalText: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 20,
    color: '#555',
  },
  modalButton: {
    width: '100%',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 10,
    backgroundColor: '#6B46C1',
  },
  modalButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '500',
  },
  modalButtonOutline: {
    width: '100%',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#6B46C1',
  },
  modalButtonOutlineText: {
    color: '#6B46C1',
    fontSize: 16,
    fontWeight: '500',
  },
});

export default SelectFriendsScreen; 